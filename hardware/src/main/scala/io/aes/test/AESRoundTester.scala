package aes

import Chisel._

class AESTester(dut: AES) extends Tester(dut) {

  val testKeys = List(
    List(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    List(0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63),
    List(0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa),
    List(0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99),
    List(0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b),
    List(0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90),
    List(0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7),
    List(0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b),
    List(0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f),
    List(0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41),
    List(0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e)
)

  val testBlocks = List(
    List(0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6), 
    List(0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6), 
    List(0x1f, 0xe1, 0x0f, 0xe9, 0x3a, 0x54, 0x88, 0x01, 0x7b, 0x37, 0x48, 0xc9, 0xec, 0x25, 0xda, 0xfa), 
    List(0x1f, 0xc3, 0xab, 0xba, 0x1e, 0xb3, 0x6d, 0xc0, 0x92, 0x21, 0xee, 0x1b, 0x74, 0x54, 0x22, 0x7e), 
    List(0x67, 0x06, 0xc7, 0xb3, 0xf6, 0xa5, 0x7a, 0xf1, 0xd4, 0xe7, 0x29, 0xcf, 0xd5, 0x2a, 0x82, 0x63), 
    List(0xab, 0x80, 0x1e, 0xa1, 0xda, 0x43, 0x52, 0x1a, 0xb6, 0xf7, 0x80, 0x10, 0x99, 0xb3, 0xa8, 0x94), 
    List(0x7a, 0x16, 0xb4, 0xbd, 0x1e, 0xac, 0xc8, 0x3e, 0x76, 0x7a, 0x46, 0x29, 0xb2, 0xee, 0xf4, 0xfb), 
    List(0xbe, 0x63, 0xa5, 0x25, 0x40, 0x58, 0x36, 0x8b, 0xae, 0xa9, 0xd5, 0xa5, 0x80, 0x8b, 0xd4, 0x00), 
    List(0xb8, 0x69, 0x70, 0xc1, 0x3e, 0x03, 0x69, 0xf5, 0x03, 0x06, 0xf9, 0x4a, 0x52, 0x32, 0xc6, 0x25), 
    List(0xfd, 0xec, 0x7c, 0x1b, 0x39, 0x7a, 0x47, 0xde, 0xb3, 0x2e, 0xc1, 0x2c, 0x6e, 0x32, 0x8b, 0x28), 
    List(0x20, 0x93, 0xfa, 0xd4, 0x6f, 0xe5, 0x0a, 0xa5, 0xaf, 0x7d, 0xfa, 0x60, 0xf1, 0xf4, 0xd0, 0x77), 
    List(0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e)
)

  // Perform a complete AES encryption with all the rounds.

  // Perform the first 9 rounds
  for (r <- 0 to 10) {
    poke(dut.io.readyIn, false)
    poke(dut.io.iterIn, r)

    for (i <- 0 to 15) {
      poke(dut.io.keyIn(i), testKeys(r)(i))
      poke(dut.io.blockIn(i), testBlocks(r)(i))
    }

    poke(dut.io.validIn, true)

    step(64)
    
    poke(dut.io.validIn, false)

    for(i <- 0 to 15) {
      if (r < 10) {
        expect(dut.io.keyOut(i), testKeys(r+1)(i))
      }
      expect(dut.io.blockOut(i), testBlocks(r+1)(i))
    }

    expect(dut.io.validOut, true)
    poke(dut.io.readyIn, true)

    step(1)

  }

}

object AESTester {
  println("Testing the AES Module")
    def main(args: Array[String]): Unit = {
      chiselMainTest(Array[String]("--genHarness", "--test", "--backend", "c", "--compile", "--vcd", "--targetDir", "generated"), () => Module(new AES())) {
        c => new AESTester(c)
    }
  }
}
